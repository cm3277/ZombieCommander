package com.JustMoser.ZombieCommander;

import android.graphics.Camera;

import com.JustMoser.ZombieCommander.Helper.ProfileManager;
import com.JustMoser.ZombieCommander.Helper.Audio.MusicManager;
import com.JustMoser.ZombieCommander.Helper.Audio.SoundManager;
import com.JustMoser.ZombieCommander.Screens.SplashScreen;
import com.badlogic.gdx.ApplicationListener;
import com.badlogic.gdx.Game;
import com.badlogic.gdx.Gdx;
import com.badlogic.gdx.Screen;
import com.badlogic.gdx.graphics.FPSLogger;
import com.badlogic.gdx.graphics.GL20;
import com.badlogic.gdx.graphics.OrthographicCamera;
import com.badlogic.gdx.graphics.g2d.SpriteBatch;
import com.badlogic.gdx.math.Rectangle;
import com.badlogic.gdx.math.Vector2;

/**
 * The game's main class, called as application events are fired.
 */
public class Tyrian extends Game implements ApplicationListener
{
    // constant useful for logging
    public static final String LOG = Tyrian.class.getSimpleName();

    // a libgdx helper class that logs the current FPS each second
    private FPSLogger fpsLogger;
    private ProfileManager profileManager;
    private SoundManager soundManager;
    private MusicManager musicManager;
    
    //Keep aspect ratio for all sizes
    private static final int VIRTUAL_WIDTH = 480;
    private static final int VIRTUAL_HEIGHT = 800;
    private static final float ASPECT_RATIO = (float)VIRTUAL_WIDTH/(float)VIRTUAL_HEIGHT;

    private OrthographicCamera camera;
    private Rectangle viewport;
    private SpriteBatch sb;
    //private GameServices gameServices;
    //private Activity androidActivity;
    //private static IActivityRequestHandler myRequestHandler;

    

    public Tyrian()
    {
    	
    }
    
    //public Tyrian(IActivityRequestHandler requestHandler)
    //{
    //	myRequestHandler = requestHandler;
    //}

    // Screen methods

    public SplashScreen getSplashScreen()
    {
        return new SplashScreen( this );
    }
    
    //public static IActivityRequestHandler getIActivityRequestHandler()
    //{
    //	return myRequestHandler;
    //}



    @Override
    public void create()
    {
    	sb = new SpriteBatch();
        camera = new OrthographicCamera(VIRTUAL_WIDTH, VIRTUAL_HEIGHT);
        
        Gdx.app.log( Tyrian.LOG, "Creating game" );
        fpsLogger = new FPSLogger();
        
        // create the sound manager
        soundManager = new SoundManager();
        // create the sound manager
        musicManager = new MusicManager();

        // create the profile manager
        profileManager = new ProfileManager();
        profileManager.retrieveProfile();
 
        setScreen( getSplashScreen() );
    }

    @Override
    public void resize(
        int width,
        int height )
    {
        super.resize( width, height );
        Gdx.app.log( Tyrian.LOG, "Resizing game to: " + width + " x " + height );
     // calculate new viewport
        float aspectRatio = (float)width/(float)height;
        float scale = 1f;
        Vector2 crop = new Vector2(0f, 0f); 
        if(aspectRatio > ASPECT_RATIO)
        {
            scale = (float)height/(float)VIRTUAL_HEIGHT;
            crop.x = (width - VIRTUAL_WIDTH*scale)/2f;
        }
        else if(aspectRatio < ASPECT_RATIO)
        {
            scale = (float)width/(float)VIRTUAL_WIDTH;
            crop.y = (height - VIRTUAL_HEIGHT*scale)/2f;
        }
        else
        {
            scale = (float)width/(float)VIRTUAL_WIDTH;
        }

        float w = (float)VIRTUAL_WIDTH*scale;
        float h = (float)VIRTUAL_HEIGHT*scale;
        viewport = new Rectangle(crop.x, crop.y, w, h);
    }

    @Override
    public void render()
    {
    	// update camera
        camera.update();
        //camera.apply(Gdx.gl20);

        // set viewport
        Gdx.gl.glViewport((int) viewport.x, (int) viewport.y,
                          (int) viewport.width, (int) viewport.height);

        // clear previous frame
        Gdx.gl.glClear(GL20.GL_COLOR_BUFFER_BIT);
        super.render();

        // output the current FPS
        fpsLogger.log();
    }

    @Override
    public void pause()
    {
        super.pause();
        Gdx.app.log( Tyrian.LOG, "Pausing game" );
        // persist the profile, because we don't know if the player will come
        // back to the game
        profileManager.persist();
    }

    @Override
    public void resume()
    {
        super.resume();
        Gdx.app.log( Tyrian.LOG, "Resuming game" );
    }

    @Override
    public void setScreen(Screen screen )
    {
        super.setScreen( screen );
        Gdx.app.log( Tyrian.LOG, "Setting screen: " + screen.getClass().getSimpleName() );
    }
    @Override
    public void dispose()
    {
        super.dispose();
        Gdx.app.log( Tyrian.LOG, "Disposing game" );
        
        // dipose some services
        //musicManager.dispose();
        soundManager.dispose();
        musicManager.dispose();
    }
}
