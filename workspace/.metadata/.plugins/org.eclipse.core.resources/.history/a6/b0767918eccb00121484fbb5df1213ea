package com.me.tyrian.Screens;

import com.JustMoser.ZombieCommander.Tyrian;
import com.JustMoser.ZombieCommander.ImageActors.AbstractImage;
import com.badlogic.gdx.Gdx;
import com.badlogic.gdx.Screen;
import com.badlogic.gdx.files.FileHandle;
import com.badlogic.gdx.graphics.GL20;
import com.badlogic.gdx.graphics.g2d.BitmapFont;
import com.badlogic.gdx.graphics.g2d.SpriteBatch;
import com.badlogic.gdx.graphics.g2d.TextureAtlas;
import com.badlogic.gdx.graphics.g2d.TextureRegion;
import com.badlogic.gdx.scenes.scene2d.InputEvent;
import com.badlogic.gdx.scenes.scene2d.Stage;
import com.badlogic.gdx.scenes.scene2d.ui.Button;
import com.badlogic.gdx.scenes.scene2d.ui.Image;
import com.badlogic.gdx.scenes.scene2d.ui.Skin;
import com.badlogic.gdx.scenes.scene2d.ui.Table;
import com.badlogic.gdx.scenes.scene2d.utils.ClickListener;

/**
 * The base class for all game screens.
 */
public abstract class AbstractScreen implements Screen
{
    protected final Tyrian game;
    private static Tyrian staticGame;
    protected final Stage stage;
    private BitmapFont font;
    private SpriteBatch batch;
    private Skin skin;
    private Table table;
    private static Button nextLevel;
    private static Button mainMenu;
    private TextureRegion splashRegion;
    private TextureRegion menuRegion;
    private Image menuBackgroundImage;
    
    private TextureAtlas atlas;


    public AbstractScreen(Tyrian game )
    {
        this.game = game;
        staticGame = game;
        this.stage = new Stage( 0, 0, true );
        AbstractImage.setStaticstage(this.stage);
    }

    protected String getName()
    {
        return getClass().getSimpleName();
    }
    
    public BitmapFont getFont()
    {
        if( font == null ) {
            font = new BitmapFont();
        }
        return font;
    }
    
    protected Skin getSkin()
    {
        if( skin == null ) {
            FileHandle skinFile = Gdx.files.internal( "uiskin.json" );
            skin = new Skin( skinFile );
            AbstractImage.setSkin(skinFile);
        }
        return skin;
    }


    public SpriteBatch getBatch()
    {
        if( batch == null ) {
            batch = new SpriteBatch();
        }
        return batch;
    }
    
    public static Button getNextLevelButton()
    {
    	if (nextLevel == null) {
    		nextLevel = new Button(AbstractImage.getSkin());
    		nextLevel.add("Exit");
            
    		nextLevel.addListener(new ClickListener() {
        		@Override
        		public void touchUp(InputEvent event,float x,float y,int pointer,int button)
                {
                    super.touchUp( event, x, y, pointer, button );
                    AbstractImage.resetArrays();
                    staticGame.setScreen(new WorldSelectScreen(staticGame));
                }
        	});
    	}
    	return nextLevel;
    }
    
    public static Button getMainMenuButton()
    {
    	if (mainMenu == null) {
    		mainMenu = new Button(AbstractImage.getSkin());
    		mainMenu.add("Exit To Menu");
            
    		mainMenu.addListener(new ClickListener() {
        		@Override
        		public void touchUp(InputEvent event,float x,float y,int pointer,int button)
                {
                    super.touchUp( event, x, y, pointer, button );
                    AbstractImage.resetArrays();
                    staticGame.setScreen(new MenuScreen(staticGame));
                }
        	});
    	}
    	return mainMenu;
    }

    // Screen implementation

    @Override
    public void show()
    {
        Gdx.app.log( Tyrian.LOG, "Showing screen: " + getName() );
        // set the input processor
        Gdx.input.setInputProcessor( stage );
        stage.clear();
    }

    @Override
    public void resize( int width, int height )
    {
        Gdx.app.log( Tyrian.LOG, "Resizing screen: " + getName() + " to: " + width + " x " + height );

        // resize the stage
        stage.setViewport( width, height, true );
        //stage.clear();
    }

    @Override
    public void render(float delta )
    {
        // the following code clears the screen with the given RGB color (black)
        Gdx.gl.glClearColor( 0f, 0f, 0f, 1f );
        Gdx.gl.glClear( GL20.GL_COLOR_BUFFER_BIT );

        // update and draw the stage actors
        stage.act( delta );
        stage.draw();
    }
    
    public TextureAtlas getAtlas()
    {
        if( atlas == null ) {
            atlas = new TextureAtlas( Gdx.files.internal( "gameTextures.pack" ) );
        }
        return atlas;
    }
    
    protected Table getTable()
    {
        if( table == null ) {
            table = new Table(getSkin());
            table.setFillParent( true );
            //table.debug();
            stage.addActor( table );
        }
        return table;
    }
    
    public TextureRegion getSplashRegion()
    {
    	if (splashRegion == null){
    		splashRegion = getAtlas().findRegion( "splash" );
    	}
    	return splashRegion;
    }
    
    public TextureRegion getMenuRegion()
    {
    	if (menuRegion == null){
    		return getAtlas().findRegion( "MenuBackground" );
    	}
    	return menuRegion;
    }
    
    public Image getMenuBackgroundImage()
    {
 		if (menuBackgroundImage == null) {
 			menuBackgroundImage = new Image(getMenuRegion());
 			menuBackgroundImage.setFillParent(true);
 		}
    	return menuBackgroundImage;
    }

    @Override
    public void hide()
    {
        Gdx.app.log( Tyrian.LOG, "Hiding screen: " + getName() );
        dispose();
    }

    @Override
    public void pause()
    {
        Gdx.app.log( Tyrian.LOG, "Pausing screen: " + getName() );
    }

    @Override
    public void resume()
    {
        Gdx.app.log( Tyrian.LOG, "Resuming screen: " + getName() );
    }

    @Override
    public void dispose()
    {
        Gdx.app.log( Tyrian.LOG, "Disposing screen: " + getName() );

        // dispose the collaborators
        if( font != null ) font.dispose();
        if( batch != null ) batch.dispose();
        if( skin != null ) skin.dispose();
        if( atlas != null ) atlas.dispose();
        this.stage.clear();
        this.stage.dispose();
    }
}
